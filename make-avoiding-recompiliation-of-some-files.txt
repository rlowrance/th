9.4 Avoiding Recompilation of Some Files

Sometimes you may have changed a source file but you do not want to recompile all
the files that depend on it. For example, suppose you add a macro or a declaration
to a header file that many other files depend on. Being conservative, make assumes
that any change in the header file requires recompilation of all dependent files, 
but you know that they do not need to be recompiled and you would rather not waste 
the time waiting for them to compile.

If you anticipate the problem before changing the header file, you can use
the ‘-t’ flag. This flag tells make not to run the recipes in the rules, but rather 
to mark the target up to date by changing its last-modification date. You would 
follow this procedure:

1. Use the command ‘make’ to recompile the source files that really need recompilation, 
ensuring that the object files are up-to-date before you begin.
2. Make the changes in the header files.
3. Use the command ‘make -t’ to mark all the object files as up to date. The next time
you run make, the changes in the header files will not cause any recompilation.

If you have already changed the header file at a time when some files do need 
recompilation, it is too late to do this. Instead, you can use the ‘-o file’ flag,
which marks a specified file as “old” (see Summary of Options). This means that the 
file itself will not be remade, and nothing else will be remade on its account. Follow
this procedure:

1. Recompile the source files that need compilation for reasons independent of the 
particular header file, with ‘make -o headerfile’. If several header files are involved, 
use a separate ‘-o’ option for each header file.
2. Touch all the object files with ‘make -t’.
